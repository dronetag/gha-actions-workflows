name: Announce Deployment to Slack

# Workflow for rich-text announcement of deployment result
# to Slack channel

on:
  workflow_call:
    inputs:
      product-name:
        type: string
        required: false
        default: ${{ github.repository }}
      environment:
        type: string
        required: false
        default: ${{ github.ref }}
      availability-text:
        type: string
        required: false
      availability-url:
        type: string
        required: false
        default: https://github.com/${{ github.repository }}/releases
      release-url:
        type: string
        required: false
    secrets:
      channel-id:
        required: true
      slack-bot-token:
        required: true

jobs:
  send-announcement:
    name: Send the announcement to Slack
    runs-on: ubuntu-latest
    env:
      GIT_LOG_FORMAT: "format:<https://github.com/${{ github.repository }}/commit/%H|%h> %s"
      TZ: Europe/Prague
      PRODUCT_NAME: ${{ inputs.product-name }}
      REPOSITORY_URL: https://github.com/${{ github.repository }}
      REPOSITORY_NAME: ${{ github.repository }}
      COMMIT_SHA: ${{ github.sha }}
      AVAILABILITY_TEXT: ${{ inputs.availability-text }}
      AVAILABILITY_URL: ${{ inputs.availability-url }}
      RELEASE_URL: ${{ inputs.release-url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: { fetch-depth: 0 } # Full history needed

      - name: Collect repository information
        id: collect
        run: |
          echo "version=$(git describe --tags)" >> $GITHUB_OUTPUT
          export INPUT_ENVIRONMENT="${{ inputs.environment }}"
          echo "environment=${INPUT_ENVIRONMENT##*/}" >> $GITHUB_OUTPUT
          export PREV_TAG="$(git describe --tags --abbrev=0 @^)"
          echo -n "changelog=" >> $GITHUB_OUTPUT
          git log $PREV_TAG..@ --format="$GIT_LOG_FORMAT" --merges -n 10 | sed 's/$/\\n/' | tr -d '\n' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "deployed=$(date +"%F %T")" >> $GITHUB_OUTPUT

      - name: Prepare optional sections
        id: sections
        env:
          CHANGELOG: ${{ steps.collect.outputs.changelog }}
        run: |
          if [[ ! -z "$AVAILABILITY_TEXT" ]]; then
            echo "availabilitycontent=\
              {\"type\": \"divider\"},\
              {\
                \"type\": \"section\",\
                \"text\": {\"type\": \"mrkdwn\",\"text\": \"_${AVAILABILITY_TEXT}_\"},\
                \"accessory\": {\
                  \"type\": \"button\",\
                  \"text\": {\"type\": \"plain_text\", \"text\": \"Open\"},\
                  \"url\": \"$AVAILABILITY_URL\"\
                }\
              }," >> $GITHUB_OUTPUT
          fi
          if [[ ! -z "$CHANGELOG" ]]; then
            printf "changelogcontent=\
              {\"type\": \"divider\"},\
              {\
                \"type\": \"section\",\
                \"text\": {\
                  \"type\": \"mrkdwn\",\
                  \"text\": \"*Introduced changes*%s\"\
                }\
              },\n" "\n$CHANGELOG" >> $GITHUB_OUTPUT
          fi
          echo "shashort=${COMMIT_SHA:0:8}" >> $GITHUB_OUTPUT
      - name: Send request to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-bot-token }}
          VERSION: ${{ steps.collect.outputs.version }}
          ENVIRONMENT: ${{ steps.collect.outputs.environment }}
          DEPLOY_DATE: ${{ steps.collect.outputs.deploy-date }}
          CHANGELOG: ${{ steps.collect.outputs.changelog }}
        with:
          channel-id: ${{ secrets.channel-id }}
          payload: |
            {
              "text": "${{ env.PRODUCT_NAME }} ${{ env.VERSION }} has been deployed to ${{ env.ENVIRONMENT }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ env.PRODUCT_NAME }} ${{ env.VERSION }} has been deployed to ${{ env.ENVIRONMENT }}",
                    "emoji": true
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "<${{ env.REPOSITORY_URL }}|${{ env.REPOSITORY_NAME }}>"
                    }
                  ]
                },
                {"type": "divider"},
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn", "text": "*Version*\n<${{ env.RELEASE_URL }}|${{ env.VERSION }}>"
                    },
                    {
                      "type": "mrkdwn", "text": "*Environment*\n${{ env.ENVIRONMENT }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit SHA*\n<${{ env.REPOSITORY_URL }}/commit/${{ env.COMMIT_SHA }}|${{ steps.sections.outputs.shashort }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed at*\n${{ env.DEPLOY_DATE }}"
                    }
                  ]
                },
                ${{ steps.sections.outputs.availabilitycontent }}
                ${{ steps.sections.outputs.changelogcontent }}
                {"type": "divider"}
              ]
            }
      - name: Make announcement summary on GitHub
        id: github-summary
        env:
          VERSION: ${{ steps.collect.outputs.version }}
          ENVIRONMENT: ${{ steps.collect.outputs.environment }}
          DEPLOY_DATE: ${{ steps.collect.outputs.deploy-date }}
          CHANGELOG: ${{ steps.collect.outputs.changelog }}
        run: |
          echo "## $PRODUCT_NAME $VERSION deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION  " >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** $ENVIRONMENT  " >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA:** $COMMIT_SHA  " >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $DEPLOY_DATE  " >> $GITHUB_STEP_SUMMARY
          if [[ ! -z "$RELEASE_URL" ]]; then
            echo "**GitHub Release:** [$VERSION]($RELEASE_URL)"
          fi
          if [[ ! -z "$AVAILABILITY_TEXT" ]]; then
            echo "" >>  $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >>  $GITHUB_STEP_SUMMARY
            echo "$AVAILABILITY_TEXT  " >> $GITHUB_STEP_SUMMARY
            echo "[Open]($AVAILABILITY_URL)" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ ! -z "$CHANGELOG" ]]; then
            echo "" >>  $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >>  $GITHUB_STEP_SUMMARY
            echo "### Introduced changes" >> $GITHUB_STEP_SUMMARY
            echo "$CHANGELOG" >> $GITHUB_STEP_SUMMARY
          fi